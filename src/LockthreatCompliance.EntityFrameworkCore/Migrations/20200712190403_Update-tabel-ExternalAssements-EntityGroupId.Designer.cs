// <auto-generated />
using System;
using LockthreatCompliance.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LockthreatCompliance.Migrations
{
    [DbContext(typeof(LockthreatComplianceDbContext))]
    [Migration("20200712190403_Update-tabel-ExternalAssements-EntityGroupId")]
    partial class UpdatetabelExternalAssementsEntityGroupId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Edition");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("MethodName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("ReturnValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserLinkId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Result")
                        .HasColumnType("tinyint");

                    b.Property<string>("TenancyName")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAbandoned")
                        .HasColumnType("bit");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextTryTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<short>("TryCount")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name", "UserId")
                        .IsUnique();

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.DynamicEntityParameters.DynamicParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InputType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParameterName", "TenantId")
                        .IsUnique()
                        .HasFilter("[ParameterName] IS NOT NULL AND [TenantId] IS NOT NULL");

                    b.ToTable("AbpDynamicParameters");
                });

            modelBuilder.Entity("Abp.DynamicEntityParameters.DynamicParameterValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DynamicParameterId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DynamicParameterId");

                    b.ToTable("AbpDynamicParameterValues");
                });

            modelBuilder.Entity("Abp.DynamicEntityParameters.EntityDynamicParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DynamicParameterId")
                        .HasColumnType("int");

                    b.Property<string>("EntityFullName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DynamicParameterId");

                    b.HasIndex("EntityFullName", "DynamicParameterId", "TenantId")
                        .IsUnique()
                        .HasFilter("[EntityFullName] IS NOT NULL AND [TenantId] IS NOT NULL");

                    b.ToTable("AbpEntityDynamicParameters");
                });

            modelBuilder.Entity("Abp.DynamicEntityParameters.EntityDynamicParameterValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityDynamicParameterId")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityDynamicParameterId");

                    b.ToTable("AbpEntityDynamicParameterValues");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ChangeType")
                        .HasColumnType("tinyint");

                    b.Property<long>("EntityChangeSetId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(48)")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasColumnType("nvarchar(192)")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtensionData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityChangeId")
                        .HasColumnType("bigint");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(96)")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasColumnType("nvarchar(192)")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.IdentityServer4.PersistedGrantEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("AbpPersistedGrants");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(96)")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(96)")
                        .HasMaxLength(96);

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint");

                    b.Property<string>("TenantIds")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(96)")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasColumnType("nvarchar(96)")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(96)")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(96)")
                        .HasMaxLength(96);

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(95)")
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnitRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "RoleId");

                    b.ToTable("AbpOrganizationUnitRoles");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpWebhookEvents");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSendAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("WebhookEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebhookSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WebhookEventId");

                    b.ToTable("AbpWebhookSendAttempts");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Headers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Webhooks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpWebhookSubscriptions");
                });

            modelBuilder.Entity("LockthreatCompliance.AssessmentSchedules.ExternalAsssementSchedules.ExtAssSchAuthoritativeDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthoritativeDocumentId")
                        .HasColumnType("int");

                    b.Property<long>("ExternalAssessmentScheduleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthoritativeDocumentId");

                    b.HasIndex("ExternalAssessmentScheduleId");

                    b.ToTable("ExtAssSchAuthoritativeDocuments");
                });

            modelBuilder.Entity("LockthreatCompliance.AssessmentSchedules.ExternalAsssementSchedules.ExtAssSchDetailAuthoritativeDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthoritativeDocumentId")
                        .HasColumnType("int");

                    b.Property<long>("ExternalAssessmentScheduleDetailId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthoritativeDocumentId");

                    b.HasIndex("ExternalAssessmentScheduleDetailId");

                    b.ToTable("ExtAssSchDetailAuthoritativeDocuments");
                });

            modelBuilder.Entity("LockthreatCompliance.AssessmentSchedules.ExternalAsssementSchedules.ExternalAssessmentSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssessmentInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<string>("AssessmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssessmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBack")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("RecurringJobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ScheduleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("SendEmailNotify")
                        .HasColumnType("bit");

                    b.Property<bool>("SendSmsNotify")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentTypeId");

                    b.HasIndex("ScheduleTypeId");

                    b.ToTable("ExternalAssessmentSchedules");
                });

            modelBuilder.Entity("LockthreatCompliance.AssessmentSchedules.ExternalAsssementSchedules.ExternalAssessmentScheduleDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssessmentInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<string>("AssessmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssessmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ExternalAssessmentScheduleId")
                        .HasColumnType("bigint");

                    b.Property<string>("FeedBack")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("RecurringJobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<string>("ScheduleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("SendEmailNotify")
                        .HasColumnType("bit");

                    b.Property<bool>("SendSmsNotify")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentTypeId");

                    b.HasIndex("ExternalAssessmentScheduleId");

                    b.HasIndex("ScheduleTypeId");

                    b.ToTable("ExternalAssessmentScheduleDetails");
                });

            modelBuilder.Entity("LockthreatCompliance.AssessmentSchedules.InternalAsssementSchedules.InternalAssessmentSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssessmentInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<string>("AssessmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssessmentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AuthoritativeDocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBack")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<Guid?>("RecurringJobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ScheduleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("SendEmailNotify")
                        .HasColumnType("bit");

                    b.Property<bool>("SendSmsNotify")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentTypeId");

                    b.HasIndex("AuthoritativeDocumentId");

                    b.HasIndex("ScheduleTypeId");

                    b.ToTable("InternalAssessmentSchedules");
                });

            modelBuilder.Entity("LockthreatCompliance.AssessmentSchedules.InternalAsssementSchedules.InternalAssessmentScheduleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssessmentInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<string>("AssessmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssessmentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AuthoritativeDocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBack")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<int?>("InternalAssessmentScheduleId")
                        .HasColumnType("int");

                    b.Property<Guid?>("RecurringJobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("ScheduleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("SendEmailNotify")
                        .HasColumnType("bit");

                    b.Property<bool>("SendSmsNotify")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentTypeId");

                    b.HasIndex("AuthoritativeDocumentId");

                    b.HasIndex("InternalAssessmentScheduleId");

                    b.HasIndex("ScheduleTypeId");

                    b.ToTable("InternalAssessmentScheduleDetails");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditDecForms.AuditDecForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditAgencyApprover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AuditProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("AuditVensign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Decision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoHApprover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoHSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityGroupId")
                        .HasColumnType("int");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Judgement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("OtherApplicable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OutPutConClusion")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuditProjectId");

                    b.HasIndex("EntityGroupId");

                    b.HasIndex("FacilityTypeId");

                    b.ToTable("AuditDecForms");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditDecForms.AuditDecUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<int?>("AuditDecFormId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberNameId")
                        .HasColumnType("bigint");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuditDecFormId");

                    b.HasIndex("MemberNameId");

                    b.ToTable("AuditDecUsers");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditDocSubModelPath", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AuditMeetingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuditProcedureId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TemplateChecklistId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuditMeetingId");

                    b.HasIndex("AuditProcedureId");

                    b.HasIndex("TemplateChecklistId");

                    b.ToTable("AuditDocSubModelsPath");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditDocumentPath", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AuditProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuditProjectId");

                    b.ToTable("AuditDocumentsPath");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditMeeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppEntityType")
                        .HasColumnType("int");

                    b.Property<int?>("AuditOrgId")
                        .HasColumnType("int");

                    b.Property<long>("AuditProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("AuditVendorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorData")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("MeetingStageId")
                        .HasColumnType("int");

                    b.Property<string>("MeetingTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeetingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("MeetingVenue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuditOrgId");

                    b.HasIndex("AuditProjectId");

                    b.HasIndex("AuditVendorId");

                    b.HasIndex("MeetingStageId");

                    b.HasIndex("MeetingTypeId");

                    b.ToTable("AuditMeetings");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditProcedure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppEntityType")
                        .HasColumnType("int");

                    b.Property<long?>("AuditProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProcedureTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuditProjectId");

                    b.ToTable("AuditProcedures");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AuditAreaId")
                        .HasColumnType("int");

                    b.Property<long?>("AuditCoordinatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("AuditCriteria")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<string>("AuditDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AuditManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("AuditObjective")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<string>("AuditScope")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<int?>("AuditStageId")
                        .HasColumnType("int");

                    b.Property<int?>("AuditStatusId")
                        .HasColumnType("int");

                    b.Property<string>("AuditTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AuditTypeId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityGroupId")
                        .HasColumnType("int");

                    b.Property<string>("FiscalYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LeadAuditeeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LeadAuditorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageAuditDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StageEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StageStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuditAreaId");

                    b.HasIndex("AuditCoordinatorId");

                    b.HasIndex("AuditManagerId");

                    b.HasIndex("AuditStageId");

                    b.HasIndex("AuditStatusId");

                    b.HasIndex("AuditTypeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EntityGroupId");

                    b.HasIndex("LeadAuditeeId");

                    b.HasIndex("LeadAuditorId");

                    b.ToTable("AuditProjects");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditProjectAuthoritativeDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AuditProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("AuthoritativeDocumentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuditProjectId");

                    b.HasIndex("AuthoritativeDocumentId");

                    b.ToTable("AuditProjectAuthoritativeDocuments");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditProjectQuestionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AuditProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuestionGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuditProjectId");

                    b.HasIndex("QuestionGroupId");

                    b.ToTable("AuditProjectQuestionGroups");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditProjectTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AuditProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("AuditProjectTeamUserType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TeamContactId")
                        .HasColumnType("int");

                    b.Property<long?>("TeamUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuditProjectId");

                    b.HasIndex("TeamContactId");

                    b.HasIndex("TeamUserId");

                    b.ToTable("AuditProjectTeams");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.CertificateRegistration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AuditProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("AuditSign")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<long>("AuditUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("AuthSign")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<long>("AuthUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HESign")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<long>("HEUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuditProjectId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("AuthUserId");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("HEUserId");

                    b.ToTable("CertificateRegistrations");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.TemplateChecklist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppEntityType")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("InSystem")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TemplateTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("TemplateTypeId");

                    b.HasIndex("VendorId");

                    b.ToTable("TemplateChecklists");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.TemplateChecklistAuthoritativeDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthoritativeDocumentId")
                        .HasColumnType("int");

                    b.Property<long>("TemplateChecklistId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthoritativeDocumentId");

                    b.HasIndex("TemplateChecklistId");

                    b.ToTable("TemplateChecklistAuthoritativeDocuments");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditVendors.AuditVendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("OrganizationUnitId");

                    b.ToTable("AuditVendors");
                });

            modelBuilder.Entity("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthoratativeDocumentLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AuthorityDepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityDepartmentId");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("AuthoritativeDocuments");
                });

            modelBuilder.Entity("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocumentAuditType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuditTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("AuthoritativeDocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuditTypeId");

                    b.HasIndex("AuthoritativeDocumentId");

                    b.ToTable("AuthoritativeDocumentAuditTypes");
                });

            modelBuilder.Entity("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocumentRelatedSelf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthoritativeDocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RelatedADId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthoritativeDocumentId");

                    b.ToTable("AuthoritativeDocumentRelatedSelfs");
                });

            modelBuilder.Entity("LockthreatCompliance.AuthoritativeDocuments.ExternalControlRequirementQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthoritativeDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("ControlRequirementId")
                        .HasColumnType("int");

                    b.Property<int>("ExternalAssessmentQuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuestionAddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ControlRequirementId");

                    b.HasIndex("ExternalAssessmentQuestionId");

                    b.ToTable("ExternalControlRequirementQuestions");
                });

            modelBuilder.Entity("LockthreatCompliance.AuthoritativeDocuments.RequirementQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControlRequirementId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ControlRequirementId");

                    b.HasIndex("QuestionId");

                    b.ToTable("RequirementQuestion");
                });

            modelBuilder.Entity("LockthreatCompliance.AuthoritityDepartments.AuthorityDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuthorityDepartments");
                });

            modelBuilder.Entity("LockthreatCompliance.Authorization.Delegation.UserDelegation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("TargetUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "SourceUserId");

                    b.HasIndex("TenantId", "TargetUserId");

                    b.ToTable("AppUserDelegations");
                });

            modelBuilder.Entity("LockthreatCompliance.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("LockthreatCompliance.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AuthenticationSource")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int?>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasColumnType("nvarchar(328)")
                        .HasMaxLength(328);

                    b.Property<string>("GoogleAuthenticatorKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("nvarchar(328)")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("ShouldChangePasswordOnNextLogin")
                        .HasColumnType("bit");

                    b.Property<string>("SignInToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SignInTokenExpireTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("LockthreatCompliance.Authorization.Users.UserOriginity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationUnitId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOriginities");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssessmentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AuthoritativeDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("AuthoritativeDocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessEntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GeneralComplianceAssessmentId")
                        .HasColumnType("int");

                    b.Property<bool>("HasFetchedLastAnswers")
                        .HasColumnType("bit");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InternalAssessmentScheduleDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReportingDeadLine")
                        .HasColumnType("datetime2");

                    b.Property<double>("ReviewScore")
                        .HasColumnType("float");

                    b.Property<int?>("ScheduleDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("SendEmailNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("SendSmsNotification")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentTypeId");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("GeneralComplianceAssessmentId");

                    b.HasIndex("InternalAssessmentScheduleDetailId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.AssessmentAgreementResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExternalAssessmentId")
                        .HasColumnType("int");

                    b.Property<bool>("HasAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("ExternalAssessmentId");

                    b.HasIndex("UserId");

                    b.ToTable("AssessmentAgreementResponses");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.AssessmentRequestClarification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorityComment")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<int>("ClarificationCommentType")
                        .HasColumnType("int");

                    b.Property<int>("ClarificationNo")
                        .HasColumnType("int");

                    b.Property<int>("ClarificationType")
                        .HasColumnType("int");

                    b.Property<int?>("ControlRequirementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExternalAssessmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ResponseComment")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<int?>("ReviewDataId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("ControlRequirementId");

                    b.HasIndex("ExternalAssessmentId");

                    b.HasIndex("ReviewDataId");

                    b.ToTable("AssessmentRequestClarifications");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.BusinessEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CISO_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CISO_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CISO_Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CityOrDisctrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLegalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComplianceType")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Director_Incharge_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director_Incharge_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director_Incharge_Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int?>("FacilitySubTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("FacilityTypeSize")
                        .HasColumnType("int");

                    b.Property<string>("Facility_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facility_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HFLName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasAdminGenerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAuditableEntity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompanyLicensed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGovernmentOwned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParentReportingEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPreAssessmentQuestionaire")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfYearsInBusiness")
                        .HasColumnType("int");

                    b.Property<long?>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<string>("Owner_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner_Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ParentCompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentOrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pro_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pro_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pro_Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdPartyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("FacilitySubTypeId");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("OrganizationUnitId");

                    b.HasIndex("ThirdPartyId");

                    b.ToTable("BusinessEntities");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.BusinessEntityWorkFlowActor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimaryUser")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("NotifierId")
                        .HasColumnType("int");

                    b.Property<int?>("NotifierUserId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("NotifierId");

                    b.HasIndex("UserId");

                    b.ToTable("BusinessEntityWorkFlowActor");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.EntityApplicationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AccessAuditFindings")
                        .HasColumnType("bit");

                    b.Property<bool>("AccessAuditWorkPapers")
                        .HasColumnType("bit");

                    b.Property<bool>("AccessBusinessRisks")
                        .HasColumnType("bit");

                    b.Property<bool>("AccessExceptions")
                        .HasColumnType("bit");

                    b.Property<bool>("AccessIncidents")
                        .HasColumnType("bit");

                    b.Property<bool>("AccessInternalAssessments")
                        .HasColumnType("bit");

                    b.Property<bool>("AccessInternalFindings")
                        .HasColumnType("bit");

                    b.Property<bool>("AccessPreAuditQuestionnaire")
                        .HasColumnType("bit");

                    b.Property<string>("AgreementAcceptanceMsg")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(999999999);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableEntityGroupAdminApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableNewUserApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePreRegVerification")
                        .HasColumnType("bit");

                    b.Property<string>("FirstUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPreAssessmentQuestionaire")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginScreenDisclaimerMesg")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999999);

                    b.Property<string>("PreRegVerificationList")
                        .HasColumnType("nvarchar(999)")
                        .HasMaxLength(999);

                    b.Property<bool>("RequireBusinessEntityAcceptanceForAuditFinding")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireBusinessEntityAcceptanceForExtAssessment")
                        .HasColumnType("bit");

                    b.Property<string>("RootUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkipBEAdminApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("SkipBEAdminApprovalInExtAssessment")
                        .HasColumnType("bit");

                    b.Property<bool>("SkipExtAssessReviewerApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("SkipReviewerApproval")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EntityApplicationSettings");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.EntityApplicationSettingsCustomWorkFlowTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppSettingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityApplicationSettingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SelectedStatusId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityApplicationSettingId");

                    b.ToTable("EntityApplicationSettingsCustomWorkFlowTypes");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.FacilityTypeSizeSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppSettingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityApplicationSettingId")
                        .HasColumnType("int");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxSize")
                        .HasColumnType("int");

                    b.Property<int>("MinSize")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityApplicationSettingId");

                    b.HasIndex("FacilityTypeId");

                    b.ToTable("FacilityTypeSizeSettings");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.GeneralComplianceAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllCount")
                        .HasColumnType("int");

                    b.Property<int>("ApprovedCount")
                        .HasColumnType("int");

                    b.Property<double>("ApprovedPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubmittedCount")
                        .HasColumnType("int");

                    b.Property<double>("SubmittedPercentage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("GeneralComplianceAssessments");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.PreRegisterBusinessEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Director_Incharge_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director_Incharge_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director_Incharge_Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int?>("FacilitySubTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Facility_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facility_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HFLName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequestApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerificationDone")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner_Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pro_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pro_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pro_Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdPartyId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("FacilitySubTypeId");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("ThirdPartyId");

                    b.ToTable("PreRegisterBusinessEntities");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.ReviewData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ControlRequirementId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalAssessmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsChangedSinceLastResponse")
                        .HasColumnType("bit");

                    b.Property<int>("LastResponseType")
                        .HasColumnType("int");

                    b.Property<string>("RequestComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("ControlRequirementId");

                    b.HasIndex("ExternalAssessmentId");

                    b.ToTable("ReviewDatas");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.ReviewQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewDataId")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedAnswerOptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ReviewDataId");

                    b.ToTable("ReviewQuestions");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessRisks.BusinessRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActualClosureDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CriticalityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpectedClosureDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IdentificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemediationCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("RemediationPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RiskAssessmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RiskDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RiskImpactId")
                        .HasColumnType("int");

                    b.Property<int?>("RiskLikelihoodId")
                        .HasColumnType("int");

                    b.Property<long?>("RiskManagerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RiskOwnerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RiskTreatmentId")
                        .HasColumnType("int");

                    b.Property<int?>("RiskTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vulnerability")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("CriticalityId");

                    b.HasIndex("RiskImpactId");

                    b.HasIndex("RiskLikelihoodId");

                    b.HasIndex("RiskManagerId");

                    b.HasIndex("RiskOwnerId");

                    b.HasIndex("RiskTreatmentId");

                    b.HasIndex("RiskTypeId");

                    b.ToTable("BusinessRisks");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessRisks.BusinessRiskRemediation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessRiskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RemediationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessRiskId");

                    b.HasIndex("RemediationId");

                    b.ToTable("BusinessRiskRemediations");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessRisks.BusinessRisksCompensatingControls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessRiskId")
                        .HasColumnType("int");

                    b.Property<int>("ControlRequirementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessRiskId");

                    b.HasIndex("ControlRequirementId");

                    b.ToTable("BusinessRisksCompensatingControls");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessRisks.BusinessRisksImpactedControls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessRiskId")
                        .HasColumnType("int");

                    b.Property<int>("ControlRequirementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessRiskId");

                    b.HasIndex("ControlRequirementId");

                    b.ToTable("BusinessRisksImpactedControls");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessRisks.BusinessRisksMonitoringControls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessRiskId")
                        .HasColumnType("int");

                    b.Property<int>("ControlRequirementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessRiskId");

                    b.HasIndex("ControlRequirementId");

                    b.ToTable("BusinessRisksMonitoringControls");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessTypes.BusinessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BusinessTypes");
                });

            modelBuilder.Entity("LockthreatCompliance.Chat.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4096);

                    b.Property<int>("ReadState")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("SharedMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<int?>("TargetTenantId")
                        .HasColumnType("int");

                    b.Property<long>("TargetUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TargetTenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TargetTenantId", "UserId", "ReadState");

                    b.HasIndex("TenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TenantId", "UserId", "ReadState");

                    b.ToTable("AppChatMessages");
                });

            modelBuilder.Entity("LockthreatCompliance.ContactTypes.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("LockthreatCompliance.Contacts.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactOwnerType")
                        .HasColumnType("int");

                    b.Property<int?>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DirectPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessEntityId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("LockthreatCompliance.Contacts.EmailAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("EmailAddresses");
                });

            modelBuilder.Entity("LockthreatCompliance.ControlRequirements.ControlRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthoritativeDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("ControlStandardId")
                        .HasColumnType("int");

                    b.Property<string>("ControlStandardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ControlType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ControlStandardId");

                    b.ToTable("ControlRequirements");
                });

            modelBuilder.Entity("LockthreatCompliance.ControlStandards.ControlStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthoritativeDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DomainId")
                        .HasColumnType("int");

                    b.Property<string>("DomainName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalControlId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("ControlStandards");
                });

            modelBuilder.Entity("LockthreatCompliance.Countries.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("LockthreatCompliance.DomainEventsStorage.AssessmentSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("BusinessEntityId");

                    b.ToTable("AssessmentSubmissions");
                });

            modelBuilder.Entity("LockthreatCompliance.Domains.Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthoritativeDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("AuthoritativeDocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthoritativeDocumentId");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("LockthreatCompliance.EntityGroups.EntityGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContractPersonnel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ITSecurityStaff")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberEmpWork")
                        .HasColumnType("int");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<bool>("PreAssessmentQuestionnaireAnsweredByGroupAdminOnly")
                        .HasColumnType("bit");

                    b.Property<int>("PrimaryEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPersonnel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationUnitId");

                    b.ToTable("EntityGroups");
                });

            modelBuilder.Entity("LockthreatCompliance.EntityGroups.EntityGroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("EntityGroupId");

                    b.ToTable("EntityGroupMember");
                });

            modelBuilder.Entity("LockthreatCompliance.ExceptionTypes.ExceptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ExceptionTypes");
                });

            modelBuilder.Entity("LockthreatCompliance.Exceptions.Exception", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApprovedTillDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ApproverId")
                        .HasColumnType("bigint");

                    b.Property<int?>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CriticalityId")
                        .HasColumnType("int");

                    b.Property<int>("ExceptionTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("ExpertReviewerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("NextReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RequestorId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReviewComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewPriorityId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("CriticalityId");

                    b.HasIndex("ExceptionTypeId");

                    b.HasIndex("ExpertReviewerId");

                    b.HasIndex("RequestorId");

                    b.HasIndex("ReviewPriorityId");

                    b.ToTable("Exceptions");
                });

            modelBuilder.Entity("LockthreatCompliance.Exceptions.ExceptionCompensatingControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControlRequirementId")
                        .HasColumnType("int");

                    b.Property<int>("ExceptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ControlRequirementId");

                    b.HasIndex("ExceptionId");

                    b.ToTable("ExceptionCompensatingControls");
                });

            modelBuilder.Entity("LockthreatCompliance.Exceptions.ExceptionImpactedControlRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControlRequirementId")
                        .HasColumnType("int");

                    b.Property<int>("ExceptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ControlRequirementId");

                    b.HasIndex("ExceptionId");

                    b.ToTable("ExceptionImpactedControlRequirements");
                });

            modelBuilder.Entity("LockthreatCompliance.Exceptions.ExceptionRelatedBusinessRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessRiskId")
                        .HasColumnType("int");

                    b.Property<int>("ExceptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessRiskId");

                    b.HasIndex("ExceptionId");

                    b.ToTable("ExceptionRelatedBusinessRisks");
                });

            modelBuilder.Entity("LockthreatCompliance.Exceptions.ExceptionRemediation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExceptionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RemediationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExceptionId");

                    b.HasIndex("RemediationId");

                    b.ToTable("ExceptionRemediations");
                });

            modelBuilder.Entity("LockthreatCompliance.ExternalAssessments.ExternalAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssessmentTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("AuditProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("AuditeeTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuditorTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<long?>("BusinessEntityLeadAssessorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityGroupId")
                        .HasColumnType("int");

                    b.Property<long?>("ExternalAssessmentScheduleDetailId")
                        .HasColumnType("bigint");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FiscalYear")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralComplianceAssessmentId")
                        .HasColumnType("int");

                    b.Property<bool>("HasQuestionaireGenerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LeadAssessorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ScheduleDetailId")
                        .HasColumnType("bigint");

                    b.Property<bool>("SendEmailNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("SendSmsNotification")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentTypeId");

                    b.HasIndex("AuditProjectId");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("BusinessEntityLeadAssessorId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("EntityGroupId");

                    b.HasIndex("ExternalAssessmentScheduleDetailId");

                    b.HasIndex("GeneralComplianceAssessmentId");

                    b.HasIndex("LeadAssessorId");

                    b.HasIndex("VendorId");

                    b.ToTable("ExternalAssessments");
                });

            modelBuilder.Entity("LockthreatCompliance.ExternalAssessments.ExternalAssessmentAuditWorkPaper", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AWPTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("AuditProjectId")
                        .HasColumnType("int");

                    b.Property<long?>("AuditProjectId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DatePrepared")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExternalAssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("GeneralAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralAttachmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(999)")
                        .HasMaxLength(999);

                    b.Property<string>("MeetingAgenda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeetingAgendaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MgmtChecklist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MgmtChecklistCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(99999);

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuditProjectId1");

                    b.HasIndex("ExternalAssessmentId");

                    b.HasIndex("TypeId");

                    b.ToTable("ExternalAssessmentAuditWorkPapers");
                });

            modelBuilder.Entity("LockthreatCompliance.ExternalAssessments.ExternalAssessmentAuthoritativeDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthoritativeDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("ExternalAssessmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthoritativeDocumentId");

                    b.HasIndex("ExternalAssessmentId");

                    b.ToTable("ExternalAssessmentAuthoritativeDocument");
                });

            modelBuilder.Entity("LockthreatCompliance.ExternalAssessments.ExternalAssessmentCRQuestionare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControlRequirementId")
                        .HasColumnType("int");

                    b.Property<int>("ExternalAssessmentId")
                        .HasColumnType("int");

                    b.Property<int>("ExternalAssessmentQuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuestionAddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ControlRequirementId");

                    b.HasIndex("ExternalAssessmentId");

                    b.HasIndex("ExternalAssessmentQuestionId");

                    b.ToTable("ExternalAssessmentCRQuestionares");
                });

            modelBuilder.Entity("LockthreatCompliance.ExternalAssessments.ExternalAssessmentQuestionReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExternalAssessmentId")
                        .HasColumnType("int");

                    b.Property<int>("ExternalAssessmentQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewDataId")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int?>("SelectedAnswerOptionId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAssessmentId");

                    b.HasIndex("ExternalAssessmentQuestionId");

                    b.HasIndex("ReviewDataId");

                    b.ToTable("ExternalAssessmentQuestionReviews");
                });

            modelBuilder.Entity("LockthreatCompliance.FacilityTypes.FacilityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FacilityTypes");
                });

            modelBuilder.Entity("LockthreatCompliance.FindingReportClassifications.FindingReportClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FindingReportClassifications");
                });

            modelBuilder.Entity("LockthreatCompliance.FindingReports.FindingRemediation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FindingReportId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RemediationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FindingReportId");

                    b.HasIndex("RemediationId");

                    b.ToTable("FindingRemediations");
                });

            modelBuilder.Entity("LockthreatCompliance.FindingReports.FindingReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActionResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<long?>("AssignedToUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuditorId")
                        .HasColumnType("bigint");

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("ControlRequirementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CriticalityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFound")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FinderId")
                        .HasColumnType("bigint");

                    b.Property<int>("FindingAction")
                        .HasColumnType("int");

                    b.Property<long?>("FindingCoordinatorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FindingManagerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FindingOwnerId")
                        .HasColumnType("bigint");

                    b.Property<int>("FindingReportClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("FindingStatusId")
                        .HasColumnType("int");

                    b.Property<string>("OtherCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("AuditorId");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("ControlRequirementId");

                    b.HasIndex("CriticalityId");

                    b.HasIndex("FinderId");

                    b.HasIndex("FindingCoordinatorId");

                    b.HasIndex("FindingManagerId");

                    b.HasIndex("FindingOwnerId");

                    b.HasIndex("FindingReportClassificationId");

                    b.HasIndex("FindingStatusId");

                    b.HasIndex("VendorId");

                    b.ToTable("FindingReports");
                });

            modelBuilder.Entity("LockthreatCompliance.FindingReports.FindingReportRelatedBusinessRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessRiskId")
                        .HasColumnType("int");

                    b.Property<int?>("FindingReportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessRiskId");

                    b.HasIndex("FindingReportId");

                    b.ToTable("FindingReportRelatedBusinessRisks");
                });

            modelBuilder.Entity("LockthreatCompliance.FindingReports.FindingReportRelatedException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExceptionId")
                        .HasColumnType("int");

                    b.Property<int?>("FindingReportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExceptionId");

                    b.HasIndex("FindingReportId");

                    b.ToTable("FindingReportRelatedExceptions");
                });

            modelBuilder.Entity("LockthreatCompliance.FindingReports.FindingReportRelatedIncident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FindingReportId")
                        .HasColumnType("int");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FindingReportId");

                    b.HasIndex("IncidentId");

                    b.ToTable("FindingReportRelatedIncidents");
                });

            modelBuilder.Entity("LockthreatCompliance.Friendships.Friendship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FriendProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendTenancyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FriendTenantId")
                        .HasColumnType("int");

                    b.Property<long>("FriendUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("FriendUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FriendTenantId", "FriendUserId");

                    b.HasIndex("FriendTenantId", "UserId");

                    b.HasIndex("TenantId", "FriendUserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AppFriendships");
                });

            modelBuilder.Entity("LockthreatCompliance.IRMRelations.IRMRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BusinessRiskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExceptionId")
                        .HasColumnType("int");

                    b.Property<int?>("FindingReportId")
                        .HasColumnType("int");

                    b.Property<int>("IRMUserType")
                        .HasColumnType("int");

                    b.Property<int?>("IncidentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewComments")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(9999);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessRiskId");

                    b.HasIndex("ExceptionId");

                    b.HasIndex("FindingReportId");

                    b.HasIndex("IncidentId");

                    b.ToTable("IRMRelations");
                });

            modelBuilder.Entity("LockthreatCompliance.IRMRelations.IRMUserRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AuthorityApproverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthorityReviewerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EntityApproverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EntityReviewerId")
                        .HasColumnType("bigint");

                    b.Property<long>("IRMRelationId")
                        .HasColumnType("bigint");

                    b.Property<int>("IRMUserType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityApproverId");

                    b.HasIndex("AuthorityReviewerId");

                    b.HasIndex("EntityApproverId");

                    b.HasIndex("EntityReviewerId");

                    b.HasIndex("IRMRelationId");

                    b.ToTable("IRMUsersRelation");
                });

            modelBuilder.Entity("LockthreatCompliance.IncidentImpacts.IncidentImpact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IncidentImpacts");
                });

            modelBuilder.Entity("LockthreatCompliance.IncidentTypes.IncidentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IncidentTypes");
                });

            modelBuilder.Entity("LockthreatCompliance.Incidents.Incident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ClosedByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DetectionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("IncidentImpactId")
                        .HasColumnType("int");

                    b.Property<int>("IncidentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Prevention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Remediation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RootCause")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("ClosedByUserId");

                    b.HasIndex("IncidentImpactId");

                    b.HasIndex("IncidentTypeId");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("LockthreatCompliance.Incidents.IncidentRelatedBusinessRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessRiskId")
                        .HasColumnType("int");

                    b.Property<int?>("IncidentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessRiskId");

                    b.HasIndex("IncidentId");

                    b.ToTable("IncidentRelatedBusinessRisks");
                });

            modelBuilder.Entity("LockthreatCompliance.Incidents.IncidentRelatedException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExceptionId")
                        .HasColumnType("int");

                    b.Property<int?>("IncidentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExceptionId");

                    b.HasIndex("IncidentId");

                    b.ToTable("IncidentRelatedExceptions");
                });

            modelBuilder.Entity("LockthreatCompliance.Incidents.IncidentRemediation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RemediationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId");

                    b.HasIndex("RemediationId");

                    b.ToTable("IncidentRemediations");
                });

            modelBuilder.Entity("LockthreatCompliance.Incidents.IncidentReviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncidentId")
                        .HasColumnType("int");

                    b.Property<long>("ReviewerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("IncidentReviewers");
                });

            modelBuilder.Entity("LockthreatCompliance.MultiTenancy.Accounting.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantLegalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantTaxNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppInvoices");
                });

            modelBuilder.Entity("LockthreatCompliance.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("DayCount")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditionId")
                        .HasColumnType("int");

                    b.Property<int>("EditionPaymentType")
                        .HasColumnType("int");

                    b.Property<string>("ErrorUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalPaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gateway")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PaymentPeriodType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SuccessUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("ExternalPaymentId", "Gateway");

                    b.HasIndex("Status", "CreationTime");

                    b.ToTable("AppSubscriptionPayments");
                });

            modelBuilder.Entity("LockthreatCompliance.MultiTenancy.Payments.SubscriptionPaymentExtensionData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("SubscriptionPaymentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPaymentId", "Key", "IsDeleted")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.ToTable("AppSubscriptionPaymentsExtensionData");
                });

            modelBuilder.Entity("LockthreatCompliance.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("CustomCssId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInTrialPeriod")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoFileType")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<Guid?>("LogoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("SubscriptionEndDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionPaymentType")
                        .HasColumnType("int");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubscriptionEndDateUtc");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("LockthreatCompliance.QuestResponses.QuestResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AuditProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExternalAssessmentCRQuestionareId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalAssessmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalAssessmentQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("FlagValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuestionGroupId")
                        .HasColumnType("bigint");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewDataId")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreValue")
                        .HasColumnType("int");

                    b.Property<int?>("SelfAssessmentQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuditProjectId");

                    b.HasIndex("ExternalAssessmentCRQuestionareId");

                    b.HasIndex("ExternalAssessmentId");

                    b.HasIndex("ExternalAssessmentQuestionId");

                    b.HasIndex("QuestionGroupId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ReviewDataId");

                    b.HasIndex("SelfAssessmentQuestionId");

                    b.ToTable("QuestResponses");
                });

            modelBuilder.Entity("LockthreatCompliance.QuestResponses.QuestResponseAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("QuestResponseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestResponseId");

                    b.ToTable("QuestResponseAttachments");
                });

            modelBuilder.Entity("LockthreatCompliance.Questions.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("LockthreatCompliance.Questions.ExternalAssessmentQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ExternalAssementQuestions");
                });

            modelBuilder.Entity("LockthreatCompliance.Questions.ExternalQuestionAnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExternalQuestionAnswerOptions");
                });

            modelBuilder.Entity("LockthreatCompliance.Questions.GroupRelatedQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExternalAssessmentQuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionGroupId")
                        .HasColumnType("bigint");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAssessmentQuestionId");

                    b.HasIndex("QuestionGroupId");

                    b.HasIndex("QuestionId");

                    b.ToTable("GroupRelatedQuestions");
                });

            modelBuilder.Entity("LockthreatCompliance.Questions.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("LockthreatCompliance.Questions.QuestionGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuditVendorId")
                        .HasColumnType("int");

                    b.Property<int>("AuthoritativeDocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ControlType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FacilityTypeID")
                        .HasColumnType("int");

                    b.Property<int>("GroupType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("QuestionnaireStageId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionnaireTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionnaireType")
                        .HasColumnType("int");

                    b.Property<string>("SectionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubDomainTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuditVendorId");

                    b.HasIndex("AuthoritativeDocumentId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FacilityTypeID");

                    b.HasIndex("QuestionnaireStageId");

                    b.ToTable("QuestionGroups");
                });

            modelBuilder.Entity("LockthreatCompliance.RemediationPlans.Remediation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActualClosureDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovedTillDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AuthorityApprovedTillDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AuthorityApproverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthorityExpertReviewerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Authoritysignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EntityApproverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExpertReviewerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemediation")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemediationPlanDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RemediationPlanStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewerComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityApproverId");

                    b.HasIndex("AuthorityExpertReviewerId");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("EntityApproverId");

                    b.HasIndex("ExpertReviewerId");

                    b.HasIndex("RemediationPlanStatusId");

                    b.ToTable("Remediations");
                });

            modelBuilder.Entity("LockthreatCompliance.RemediationPlans.RemediationDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RemediationId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RemediationId");

                    b.ToTable("RemediationDocuments");
                });

            modelBuilder.Entity("LockthreatCompliance.Storage.BinaryObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AppBinaryObjects");
                });

            modelBuilder.Entity("LockthreatCompliance.Storage.DocumentPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AWPId")
                        .HasColumnType("int");

                    b.Property<long?>("AWPId1")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuditProcedureId")
                        .HasColumnType("bigint");

                    b.Property<int?>("BusinessRiskId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExceptionId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalAssessmentQuestionReviewId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FindingReportId")
                        .HasColumnType("int");

                    b.Property<int?>("IncidentId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewDataId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AWPId1");

                    b.HasIndex("AuditProcedureId");

                    b.HasIndex("BusinessRiskId");

                    b.HasIndex("ExceptionId");

                    b.HasIndex("ExternalAssessmentQuestionReviewId");

                    b.HasIndex("FindingReportId");

                    b.HasIndex("IncidentId");

                    b.HasIndex("ReviewDataId");

                    b.HasIndex("ReviewQuestionId");

                    b.ToTable("DocumentPaths");
                });

            modelBuilder.Entity("LockthreatCompliance.Editions.SubscribableEdition", b =>
                {
                    b.HasBaseType("Abp.Application.Editions.Edition");

                    b.Property<decimal?>("AnnualPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DailyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ExpiringEditionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MonthlyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TrialDayCount")
                        .HasColumnType("int");

                    b.Property<int?>("WaitingDayAfterExpire")
                        .HasColumnType("int");

                    b.Property<decimal?>("WeeklyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator().HasValue("SubscribableEdition");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId")
                        .HasColumnType("int");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("LockthreatCompliance.Authorization.Roles.Role", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("LockthreatCompliance.Authorization.Users.User", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("LockthreatCompliance.Authorization.Users.User", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.HasOne("LockthreatCompliance.Authorization.Users.User", null)
                        .WithMany("OrganizationUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("LockthreatCompliance.Authorization.Users.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("LockthreatCompliance.Authorization.Users.User", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("LockthreatCompliance.Authorization.Users.User", null)
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.DynamicEntityParameters.DynamicParameterValue", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameter", "DynamicParameter")
                        .WithMany("DynamicParameterValues")
                        .HasForeignKey("DynamicParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.DynamicEntityParameters.EntityDynamicParameter", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameter", "DynamicParameter")
                        .WithMany()
                        .HasForeignKey("DynamicParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.DynamicEntityParameters.EntityDynamicParameterValue", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.EntityDynamicParameter", "EntityDynamicParameter")
                        .WithMany()
                        .HasForeignKey("EntityDynamicParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSendAttempt", b =>
                {
                    b.HasOne("Abp.Webhooks.WebhookEvent", "WebhookEvent")
                        .WithMany()
                        .HasForeignKey("WebhookEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.AssessmentSchedules.ExternalAsssementSchedules.ExtAssSchAuthoritativeDocument", b =>
                {
                    b.HasOne("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocument", "AuthoritativeDocument")
                        .WithMany()
                        .HasForeignKey("AuthoritativeDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.AssessmentSchedules.ExternalAsssementSchedules.ExternalAssessmentSchedule", "ExternalAssessmentSchedule")
                        .WithMany("AuthoritativeDocuments")
                        .HasForeignKey("ExternalAssessmentScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.AssessmentSchedules.ExternalAsssementSchedules.ExtAssSchDetailAuthoritativeDocument", b =>
                {
                    b.HasOne("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocument", "AuthoritativeDocument")
                        .WithMany()
                        .HasForeignKey("AuthoritativeDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.AssessmentSchedules.ExternalAsssementSchedules.ExternalAssessmentScheduleDetail", "ExternalAssessmentScheduleDetail")
                        .WithMany("AuthoritativeDocuments")
                        .HasForeignKey("ExternalAssessmentScheduleDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.AssessmentSchedules.ExternalAsssementSchedules.ExternalAssessmentSchedule", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "AssessmentType")
                        .WithMany()
                        .HasForeignKey("AssessmentTypeId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "ScheduleType")
                        .WithMany()
                        .HasForeignKey("ScheduleTypeId");
                });

            modelBuilder.Entity("LockthreatCompliance.AssessmentSchedules.ExternalAsssementSchedules.ExternalAssessmentScheduleDetail", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "AssessmentType")
                        .WithMany()
                        .HasForeignKey("AssessmentTypeId");

                    b.HasOne("LockthreatCompliance.AssessmentSchedules.ExternalAsssementSchedules.ExternalAssessmentSchedule", "ExternalAssessmentSchedule")
                        .WithMany()
                        .HasForeignKey("ExternalAssessmentScheduleId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "ScheduleType")
                        .WithMany()
                        .HasForeignKey("ScheduleTypeId");
                });

            modelBuilder.Entity("LockthreatCompliance.AssessmentSchedules.InternalAsssementSchedules.InternalAssessmentSchedule", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "AssessmentType")
                        .WithMany()
                        .HasForeignKey("AssessmentTypeId");

                    b.HasOne("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocument", "AuthoritativeDocument")
                        .WithMany()
                        .HasForeignKey("AuthoritativeDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "ScheduleType")
                        .WithMany()
                        .HasForeignKey("ScheduleTypeId");
                });

            modelBuilder.Entity("LockthreatCompliance.AssessmentSchedules.InternalAsssementSchedules.InternalAssessmentScheduleDetail", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "AssessmentType")
                        .WithMany()
                        .HasForeignKey("AssessmentTypeId");

                    b.HasOne("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocument", "AuthoritativeDocument")
                        .WithMany()
                        .HasForeignKey("AuthoritativeDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.AssessmentSchedules.InternalAsssementSchedules.InternalAssessmentSchedule", "InternalAssessmentSchedule")
                        .WithMany()
                        .HasForeignKey("InternalAssessmentScheduleId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "ScheduleType")
                        .WithMany()
                        .HasForeignKey("ScheduleTypeId");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditDecForms.AuditDecForm", b =>
                {
                    b.HasOne("LockthreatCompliance.AuditProjects.AuditProject", "AuditProject")
                        .WithMany()
                        .HasForeignKey("AuditProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.EntityGroups.EntityGroup", "EntityGroup")
                        .WithMany()
                        .HasForeignKey("EntityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.FacilityTypes.FacilityType", "FacilityType")
                        .WithMany()
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.AuditDecForms.AuditDecUsers", b =>
                {
                    b.HasOne("LockthreatCompliance.AuditDecForms.AuditDecForm", "AuditDecForm")
                        .WithMany()
                        .HasForeignKey("AuditDecFormId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "MemberName")
                        .WithMany()
                        .HasForeignKey("MemberNameId");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditDocSubModelPath", b =>
                {
                    b.HasOne("LockthreatCompliance.AuditProjects.AuditMeeting", "AuditMeeting")
                        .WithMany()
                        .HasForeignKey("AuditMeetingId");

                    b.HasOne("LockthreatCompliance.AuditProjects.AuditProcedure", "AuditProcedure")
                        .WithMany()
                        .HasForeignKey("AuditProcedureId");

                    b.HasOne("LockthreatCompliance.AuditProjects.TemplateChecklist", "TemplateChecklist")
                        .WithMany()
                        .HasForeignKey("TemplateChecklistId");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditDocumentPath", b =>
                {
                    b.HasOne("LockthreatCompliance.AuditProjects.AuditProject", "AuditProject")
                        .WithMany()
                        .HasForeignKey("AuditProjectId");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditMeeting", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "AuditOrg")
                        .WithMany()
                        .HasForeignKey("AuditOrgId");

                    b.HasOne("LockthreatCompliance.AuditProjects.AuditProject", "AuditProject")
                        .WithMany()
                        .HasForeignKey("AuditProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "AuditVendor")
                        .WithMany()
                        .HasForeignKey("AuditVendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "MeetingStage")
                        .WithMany()
                        .HasForeignKey("MeetingStageId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "MeetingType")
                        .WithMany()
                        .HasForeignKey("MeetingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditProcedure", b =>
                {
                    b.HasOne("LockthreatCompliance.AuditProjects.AuditProject", "AuditProject")
                        .WithMany()
                        .HasForeignKey("AuditProjectId");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditProject", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "AuditArea")
                        .WithMany()
                        .HasForeignKey("AuditAreaId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "AuditCoordinator")
                        .WithMany()
                        .HasForeignKey("AuditCoordinatorId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "AuditManager")
                        .WithMany()
                        .HasForeignKey("AuditManagerId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "AuditStage")
                        .WithMany()
                        .HasForeignKey("AuditStageId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "AuditStatus")
                        .WithMany()
                        .HasForeignKey("AuditStatusId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "AuditType")
                        .WithMany()
                        .HasForeignKey("AuditTypeId");

                    b.HasOne("LockthreatCompliance.Countries.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("LockthreatCompliance.EntityGroups.EntityGroup", "EntityGroup")
                        .WithMany()
                        .HasForeignKey("EntityGroupId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "LeadAuditee")
                        .WithMany()
                        .HasForeignKey("LeadAuditeeId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "LeadAuditor")
                        .WithMany()
                        .HasForeignKey("LeadAuditorId");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditProjectAuthoritativeDocument", b =>
                {
                    b.HasOne("LockthreatCompliance.AuditProjects.AuditProject", "AuditProject")
                        .WithMany("AuthDocuments")
                        .HasForeignKey("AuditProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocument", "AuthoritativeDocument")
                        .WithMany()
                        .HasForeignKey("AuthoritativeDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditProjectQuestionGroup", b =>
                {
                    b.HasOne("LockthreatCompliance.AuditProjects.AuditProject", "AuditProject")
                        .WithMany("AuditProjectQuestionGroup")
                        .HasForeignKey("AuditProjectId");

                    b.HasOne("LockthreatCompliance.Questions.QuestionGroup", "QuestionGroup")
                        .WithMany()
                        .HasForeignKey("QuestionGroupId");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.AuditProjectTeam", b =>
                {
                    b.HasOne("LockthreatCompliance.AuditProjects.AuditProject", "AuditProject")
                        .WithMany("Actors")
                        .HasForeignKey("AuditProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Contacts.Contact", "TeamContact")
                        .WithMany()
                        .HasForeignKey("TeamContactId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "TeamUser")
                        .WithMany()
                        .HasForeignKey("TeamUserId");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.CertificateRegistration", b =>
                {
                    b.HasOne("LockthreatCompliance.AuditProjects.AuditProject", "AuditProject")
                        .WithMany()
                        .HasForeignKey("AuditProjectId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "AuditUser")
                        .WithMany()
                        .HasForeignKey("AuditUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "AuthUser")
                        .WithMany()
                        .HasForeignKey("AuthUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "HEUser")
                        .WithMany()
                        .HasForeignKey("HEUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.TemplateChecklist", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("LockthreatCompliance.FacilityTypes.FacilityType", "FacilityType")
                        .WithMany()
                        .HasForeignKey("FacilityTypeId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "TemplateType")
                        .WithMany()
                        .HasForeignKey("TemplateTypeId");

                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("LockthreatCompliance.AuditProjects.TemplateChecklistAuthoritativeDocument", b =>
                {
                    b.HasOne("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocument", "AuthoritativeDocument")
                        .WithMany()
                        .HasForeignKey("AuthoritativeDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.AuditProjects.TemplateChecklist", "TemplateChecklist")
                        .WithMany("AuthoritativeDocuments")
                        .HasForeignKey("TemplateChecklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.AuditVendors.AuditVendor", b =>
                {
                    b.HasOne("LockthreatCompliance.Countries.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Abp.Organizations.OrganizationUnit", "OrganizationUnit")
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocument", b =>
                {
                    b.HasOne("LockthreatCompliance.AuthoritityDepartments.AuthorityDepartment", "AuthorityDepartment")
                        .WithMany()
                        .HasForeignKey("AuthorityDepartmentId");

                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId");
                });

            modelBuilder.Entity("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocumentAuditType", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "AuditType")
                        .WithMany()
                        .HasForeignKey("AuditTypeId");

                    b.HasOne("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocument", "AuthoritativeDocument")
                        .WithMany("SelectedAuthoritativeDocumentAuditTypes")
                        .HasForeignKey("AuthoritativeDocumentId");
                });

            modelBuilder.Entity("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocumentRelatedSelf", b =>
                {
                    b.HasOne("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocument", "AuthoritativeDocument")
                        .WithMany("SelectedAuthoritativeDocumentRelatedSelfs")
                        .HasForeignKey("AuthoritativeDocumentId");
                });

            modelBuilder.Entity("LockthreatCompliance.AuthoritativeDocuments.ExternalControlRequirementQuestion", b =>
                {
                    b.HasOne("LockthreatCompliance.ControlRequirements.ControlRequirement", "ControlRequirement")
                        .WithMany()
                        .HasForeignKey("ControlRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Questions.ExternalAssessmentQuestion", "ExternalAssessmentQuestion")
                        .WithMany()
                        .HasForeignKey("ExternalAssessmentQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.AuthoritativeDocuments.RequirementQuestion", b =>
                {
                    b.HasOne("LockthreatCompliance.ControlRequirements.ControlRequirement", "ControlRequirement")
                        .WithMany("RequirementQuestions")
                        .HasForeignKey("ControlRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.Authorization.Roles.Role", b =>
                {
                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("LockthreatCompliance.Authorization.Users.User", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "BusinessEntity")
                        .WithMany("Users")
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("LockthreatCompliance.Authorization.Users.UserOriginity", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "OrganizationUnit")
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.Assessment", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "AssessmentType")
                        .WithMany()
                        .HasForeignKey("AssessmentTypeId");

                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "BusinessEntity")
                        .WithMany("Assessments")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.BusinessEntities.GeneralComplianceAssessment", "GeneralComplianceAssessment")
                        .WithMany("Assessments")
                        .HasForeignKey("GeneralComplianceAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.AssessmentSchedules.InternalAsssementSchedules.InternalAssessmentScheduleDetail", "InternalAssessmentScheduleDetail")
                        .WithMany()
                        .HasForeignKey("InternalAssessmentScheduleDetailId");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.AssessmentAgreementResponse", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessEntities.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId");

                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("LockthreatCompliance.ExternalAssessments.ExternalAssessment", "ExternalAssessment")
                        .WithMany()
                        .HasForeignKey("ExternalAssessmentId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.AssessmentRequestClarification", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessEntities.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId");

                    b.HasOne("LockthreatCompliance.ControlRequirements.ControlRequirement", "ControlRequirement")
                        .WithMany()
                        .HasForeignKey("ControlRequirementId");

                    b.HasOne("LockthreatCompliance.ExternalAssessments.ExternalAssessment", "ExternalAssessment")
                        .WithMany()
                        .HasForeignKey("ExternalAssessmentId");

                    b.HasOne("LockthreatCompliance.BusinessEntities.ReviewData", "ReviewData")
                        .WithMany("AssessmentRequestClarifications")
                        .HasForeignKey("ReviewDataId");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.BusinessEntity", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("LockthreatCompliance.Countries.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "FacilitySubType")
                        .WithMany()
                        .HasForeignKey("FacilitySubTypeId");

                    b.HasOne("LockthreatCompliance.FacilityTypes.FacilityType", "FacilityType")
                        .WithMany()
                        .HasForeignKey("FacilityTypeId");

                    b.HasOne("Abp.Organizations.OrganizationUnit", "OrganizationUnit")
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "ThirdParty")
                        .WithMany()
                        .HasForeignKey("ThirdPartyId");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.BusinessEntityWorkFlowActor", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "BusinessEntity")
                        .WithMany("Actors")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Contacts.Contact", "Notifier")
                        .WithMany()
                        .HasForeignKey("NotifierId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.EntityApplicationSettingsCustomWorkFlowTypes", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessEntities.EntityApplicationSetting", "EntityApplicationSetting")
                        .WithMany("Actors")
                        .HasForeignKey("EntityApplicationSettingId");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.FacilityTypeSizeSetting", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessEntities.EntityApplicationSetting", "EntityApplicationSetting")
                        .WithMany("FacilityTypeSizeSettings")
                        .HasForeignKey("EntityApplicationSettingId");

                    b.HasOne("LockthreatCompliance.FacilityTypes.FacilityType", "FacilityType")
                        .WithMany()
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.PreRegisterBusinessEntity", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "FacilitySubType")
                        .WithMany()
                        .HasForeignKey("FacilitySubTypeId");

                    b.HasOne("LockthreatCompliance.FacilityTypes.FacilityType", "FacilityType")
                        .WithMany()
                        .HasForeignKey("FacilityTypeId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "ThirdParty")
                        .WithMany()
                        .HasForeignKey("ThirdPartyId");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.ReviewData", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessEntities.Assessment", "Assessment")
                        .WithMany("Reviews")
                        .HasForeignKey("AssessmentId");

                    b.HasOne("LockthreatCompliance.ControlRequirements.ControlRequirement", "ControlRequirement")
                        .WithMany()
                        .HasForeignKey("ControlRequirementId");

                    b.HasOne("LockthreatCompliance.ExternalAssessments.ExternalAssessment", "ExternalAssessment")
                        .WithMany("Reviews")
                        .HasForeignKey("ExternalAssessmentId");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessEntities.ReviewQuestion", b =>
                {
                    b.HasOne("LockthreatCompliance.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.BusinessEntities.ReviewData", null)
                        .WithMany("ReviewQuestions")
                        .HasForeignKey("ReviewDataId");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessRisks.BusinessRisk", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "Criticality")
                        .WithMany()
                        .HasForeignKey("CriticalityId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "RiskImpact")
                        .WithMany()
                        .HasForeignKey("RiskImpactId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "RiskLikelihood")
                        .WithMany()
                        .HasForeignKey("RiskLikelihoodId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "RiskManager")
                        .WithMany()
                        .HasForeignKey("RiskManagerId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "RiskOwner")
                        .WithMany()
                        .HasForeignKey("RiskOwnerId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "RiskTreatment")
                        .WithMany()
                        .HasForeignKey("RiskTreatmentId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "RiskType")
                        .WithMany()
                        .HasForeignKey("RiskTypeId");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessRisks.BusinessRiskRemediation", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessRisks.BusinessRisk", "BusinessRisk")
                        .WithMany("SelectedBusinessRiskRemediations")
                        .HasForeignKey("BusinessRiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.RemediationPlans.Remediation", "Remediation")
                        .WithMany()
                        .HasForeignKey("RemediationId");
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessRisks.BusinessRisksCompensatingControls", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessRisks.BusinessRisk", "BusinessRisk")
                        .WithMany("BusinessRisksCompensatingControls")
                        .HasForeignKey("BusinessRiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.ControlRequirements.ControlRequirement", "ControlRequirement")
                        .WithMany()
                        .HasForeignKey("ControlRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessRisks.BusinessRisksImpactedControls", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessRisks.BusinessRisk", "BusinessRisk")
                        .WithMany("BusinessRisksImpactedControls")
                        .HasForeignKey("BusinessRiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.ControlRequirements.ControlRequirement", "ControlRequirement")
                        .WithMany()
                        .HasForeignKey("ControlRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.BusinessRisks.BusinessRisksMonitoringControls", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessRisks.BusinessRisk", "BusinessRisk")
                        .WithMany("BusinessRisksMonitoringControls")
                        .HasForeignKey("BusinessRiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.ControlRequirements.ControlRequirement", "ControlRequirement")
                        .WithMany()
                        .HasForeignKey("ControlRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.Contacts.Contact", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.Contacts.EmailAddress", b =>
                {
                    b.HasOne("LockthreatCompliance.Contacts.Contact", null)
                        .WithMany("EmailAddresses")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("LockthreatCompliance.ControlRequirements.ControlRequirement", b =>
                {
                    b.HasOne("LockthreatCompliance.ControlStandards.ControlStandard", "ControlStandard")
                        .WithMany("ControlRequirements")
                        .HasForeignKey("ControlStandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.ControlStandards.ControlStandard", b =>
                {
                    b.HasOne("LockthreatCompliance.Domains.Domain", "Domain")
                        .WithMany("ControlStandards")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.DomainEventsStorage.AssessmentSubmission", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessEntities.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId");
                });

            modelBuilder.Entity("LockthreatCompliance.Domains.Domain", b =>
                {
                    b.HasOne("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocument", "AuthoritativeDocument")
                        .WithMany("Domains")
                        .HasForeignKey("AuthoritativeDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.EntityGroups.EntityGroup", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "OrganizationUnit")
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.EntityGroups.EntityGroupMember", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.EntityGroups.EntityGroup", "EntityGroup")
                        .WithMany("Members")
                        .HasForeignKey("EntityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.Exceptions.Exception", b =>
                {
                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId");

                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "Criticality")
                        .WithMany()
                        .HasForeignKey("CriticalityId");

                    b.HasOne("LockthreatCompliance.ExceptionTypes.ExceptionType", "ExceptionType")
                        .WithMany()
                        .HasForeignKey("ExceptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "ExpertReviewer")
                        .WithMany()
                        .HasForeignKey("ExpertReviewerId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "Requestor")
                        .WithMany()
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "ReviewPriority")
                        .WithMany()
                        .HasForeignKey("ReviewPriorityId");
                });

            modelBuilder.Entity("LockthreatCompliance.Exceptions.ExceptionCompensatingControl", b =>
                {
                    b.HasOne("LockthreatCompliance.ControlRequirements.ControlRequirement", "ControlRequirement")
                        .WithMany()
                        .HasForeignKey("ControlRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Exceptions.Exception", "Exception")
                        .WithMany("ExceptionCompensatingControls")
                        .HasForeignKey("ExceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.Exceptions.ExceptionImpactedControlRequirement", b =>
                {
                    b.HasOne("LockthreatCompliance.ControlRequirements.ControlRequirement", "ControlRequirement")
                        .WithMany()
                        .HasForeignKey("ControlRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Exceptions.Exception", "Exception")
                        .WithMany("ExceptionImpactedControlRequirements")
                        .HasForeignKey("ExceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.Exceptions.ExceptionRelatedBusinessRisk", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessRisks.BusinessRisk", "BusinessRisk")
                        .WithMany("RelatedExceptions")
                        .HasForeignKey("BusinessRiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Exceptions.Exception", "Exception")
                        .WithMany("ExceptionRelatedBusinessRisks")
                        .HasForeignKey("ExceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.Exceptions.ExceptionRemediation", b =>
                {
                    b.HasOne("LockthreatCompliance.Exceptions.Exception", "Exception")
                        .WithMany("SelectedExceptionRemediations")
                        .HasForeignKey("ExceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.RemediationPlans.Remediation", "Remediation")
                        .WithMany()
                        .HasForeignKey("RemediationId");
                });

            modelBuilder.Entity("LockthreatCompliance.ExternalAssessments.ExternalAssessment", b =>
                {
                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "AssessmentType")
                        .WithMany()
                        .HasForeignKey("AssessmentTypeId");

                    b.HasOne("LockthreatCompliance.AuditProjects.AuditProject", "AuditProject")
                        .WithMany()
                        .HasForeignKey("AuditProjectId");

                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "BusinessEntityLeadAssessor")
                        .WithMany()
                        .HasForeignKey("BusinessEntityLeadAssessorId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("LockthreatCompliance.EntityGroups.EntityGroup", "EntityGroup")
                        .WithMany()
                        .HasForeignKey("EntityGroupId");

                    b.HasOne("LockthreatCompliance.AssessmentSchedules.ExternalAsssementSchedules.ExternalAssessmentScheduleDetail", "ExternalAssessmentScheduleDetail")
                        .WithMany()
                        .HasForeignKey("ExternalAssessmentScheduleDetailId");

                    b.HasOne("LockthreatCompliance.BusinessEntities.GeneralComplianceAssessment", "GeneralComplianceAssessment")
                        .WithMany("ExternalAssessments")
                        .HasForeignKey("GeneralComplianceAssessmentId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "LeadAssessor")
                        .WithMany()
                        .HasForeignKey("LeadAssessorId");

                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("LockthreatCompliance.ExternalAssessments.ExternalAssessmentAuditWorkPaper", b =>
                {
                    b.HasOne("LockthreatCompliance.AuditProjects.AuditProject", "AuditProject")
                        .WithMany()
                        .HasForeignKey("AuditProjectId1");

                    b.HasOne("LockthreatCompliance.ExternalAssessments.ExternalAssessment", "ExternalAssessment")
                        .WithMany("ExternalAssessmentAuditWorkPapers")
                        .HasForeignKey("ExternalAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("LockthreatCompliance.ExternalAssessments.ExternalAssessmentAuthoritativeDocument", b =>
                {
                    b.HasOne("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocument", "AuthoritativeDocument")
                        .WithMany()
                        .HasForeignKey("AuthoritativeDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.ExternalAssessments.ExternalAssessment", "ExternalAssessment")
                        .WithMany("AuthoritativeDocuments")
                        .HasForeignKey("ExternalAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.ExternalAssessments.ExternalAssessmentCRQuestionare", b =>
                {
                    b.HasOne("LockthreatCompliance.ControlRequirements.ControlRequirement", "ControlRequirement")
                        .WithMany()
                        .HasForeignKey("ControlRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.ExternalAssessments.ExternalAssessment", "ExternalAssessment")
                        .WithMany()
                        .HasForeignKey("ExternalAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Questions.ExternalAssessmentQuestion", "ExternalAssessmentQuestion")
                        .WithMany()
                        .HasForeignKey("ExternalAssessmentQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.ExternalAssessments.ExternalAssessmentQuestionReview", b =>
                {
                    b.HasOne("LockthreatCompliance.ExternalAssessments.ExternalAssessment", "ExternalAssessment")
                        .WithMany()
                        .HasForeignKey("ExternalAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Questions.ExternalAssessmentQuestion", "ExternalAssessmentQuestion")
                        .WithMany()
                        .HasForeignKey("ExternalAssessmentQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.BusinessEntities.ReviewData", "ReviewData")
                        .WithMany("ExternalAssessmentQuestionReviews")
                        .HasForeignKey("ReviewDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.FindingReports.FindingRemediation", b =>
                {
                    b.HasOne("LockthreatCompliance.FindingReports.FindingReport", "FindingReport")
                        .WithMany("SelectedFindingRemediations")
                        .HasForeignKey("FindingReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.RemediationPlans.Remediation", "Remediation")
                        .WithMany()
                        .HasForeignKey("RemediationId");
                });

            modelBuilder.Entity("LockthreatCompliance.FindingReports.FindingReport", b =>
                {
                    b.HasOne("LockthreatCompliance.ExternalAssessments.ExternalAssessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "Auditor")
                        .WithMany()
                        .HasForeignKey("AuditorId");

                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.ControlRequirements.ControlRequirement", "ControlRequirement")
                        .WithMany()
                        .HasForeignKey("ControlRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "Criticality")
                        .WithMany()
                        .HasForeignKey("CriticalityId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "Finder")
                        .WithMany()
                        .HasForeignKey("FinderId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "FindingCoordinator")
                        .WithMany()
                        .HasForeignKey("FindingCoordinatorId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "FindingManager")
                        .WithMany()
                        .HasForeignKey("FindingManagerId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "FindingOwner")
                        .WithMany()
                        .HasForeignKey("FindingOwnerId");

                    b.HasOne("LockthreatCompliance.FindingReportClassifications.FindingReportClassification", "FindingReportClassification")
                        .WithMany()
                        .HasForeignKey("FindingReportClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "FindingStatus")
                        .WithMany()
                        .HasForeignKey("FindingStatusId");

                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("LockthreatCompliance.FindingReports.FindingReportRelatedBusinessRisk", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessRisks.BusinessRisk", "BusinessRisk")
                        .WithMany("RelatedFindings")
                        .HasForeignKey("BusinessRiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.FindingReports.FindingReport", "FindingReport")
                        .WithMany("RelatedBusinessRisks")
                        .HasForeignKey("FindingReportId");
                });

            modelBuilder.Entity("LockthreatCompliance.FindingReports.FindingReportRelatedException", b =>
                {
                    b.HasOne("LockthreatCompliance.Exceptions.Exception", "Exception")
                        .WithMany("RelatedFindings")
                        .HasForeignKey("ExceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.FindingReports.FindingReport", "FindingReport")
                        .WithMany("RelatedExceptions")
                        .HasForeignKey("FindingReportId");
                });

            modelBuilder.Entity("LockthreatCompliance.FindingReports.FindingReportRelatedIncident", b =>
                {
                    b.HasOne("LockthreatCompliance.FindingReports.FindingReport", "FindingReport")
                        .WithMany("RelatedIncidents")
                        .HasForeignKey("FindingReportId");

                    b.HasOne("LockthreatCompliance.Incidents.Incident", "Incident")
                        .WithMany("RelatedFindings")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.IRMRelations.IRMRelation", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessRisks.BusinessRisk", "BusinessRisk")
                        .WithMany("IRMRelations")
                        .HasForeignKey("BusinessRiskId");

                    b.HasOne("LockthreatCompliance.Exceptions.Exception", "Exception")
                        .WithMany("IRMRelations")
                        .HasForeignKey("ExceptionId");

                    b.HasOne("LockthreatCompliance.FindingReports.FindingReport", "FindingReport")
                        .WithMany("IRMRelations")
                        .HasForeignKey("FindingReportId");

                    b.HasOne("LockthreatCompliance.Incidents.Incident", "Incident")
                        .WithMany("IRMRelations")
                        .HasForeignKey("IncidentId");
                });

            modelBuilder.Entity("LockthreatCompliance.IRMRelations.IRMUserRelation", b =>
                {
                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "AuthorityApprover")
                        .WithMany()
                        .HasForeignKey("AuthorityApproverId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "AuthorityReviewer")
                        .WithMany()
                        .HasForeignKey("AuthorityReviewerId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "EntityApprover")
                        .WithMany()
                        .HasForeignKey("EntityApproverId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "EntityReviewer")
                        .WithMany()
                        .HasForeignKey("EntityReviewerId");

                    b.HasOne("LockthreatCompliance.IRMRelations.IRMRelation", "IRMRelation")
                        .WithMany("Actors")
                        .HasForeignKey("IRMRelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.Incidents.Incident", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "ClosedByUser")
                        .WithMany()
                        .HasForeignKey("ClosedByUserId");

                    b.HasOne("LockthreatCompliance.IncidentImpacts.IncidentImpact", "IncidentImpact")
                        .WithMany()
                        .HasForeignKey("IncidentImpactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.IncidentTypes.IncidentType", "IncidentType")
                        .WithMany()
                        .HasForeignKey("IncidentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.Incidents.IncidentRelatedBusinessRisk", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessRisks.BusinessRisk", "BusinessRisk")
                        .WithMany("RelatedIncidents")
                        .HasForeignKey("BusinessRiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Incidents.Incident", "Incident")
                        .WithMany("RelatedBusinessRisks")
                        .HasForeignKey("IncidentId");
                });

            modelBuilder.Entity("LockthreatCompliance.Incidents.IncidentRelatedException", b =>
                {
                    b.HasOne("LockthreatCompliance.Exceptions.Exception", "Exception")
                        .WithMany("RelatedIncidents")
                        .HasForeignKey("ExceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Incidents.Incident", "Incident")
                        .WithMany("RelatedExceptions")
                        .HasForeignKey("IncidentId");
                });

            modelBuilder.Entity("LockthreatCompliance.Incidents.IncidentRemediation", b =>
                {
                    b.HasOne("LockthreatCompliance.Incidents.Incident", "Incident")
                        .WithMany("SelectedIncidentRemediations")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.RemediationPlans.Remediation", "Remediation")
                        .WithMany()
                        .HasForeignKey("RemediationId");
                });

            modelBuilder.Entity("LockthreatCompliance.Incidents.IncidentReviewer", b =>
                {
                    b.HasOne("LockthreatCompliance.Incidents.Incident", "Incident")
                        .WithMany("Reviewers")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("LockthreatCompliance.QuestResponses.QuestResponse", b =>
                {
                    b.HasOne("LockthreatCompliance.AuditProjects.AuditProject", "AuditProject")
                        .WithMany()
                        .HasForeignKey("AuditProjectId");

                    b.HasOne("LockthreatCompliance.ExternalAssessments.ExternalAssessmentCRQuestionare", "ExternalAssessmentCRQuestionare")
                        .WithMany()
                        .HasForeignKey("ExternalAssessmentCRQuestionareId");

                    b.HasOne("LockthreatCompliance.ExternalAssessments.ExternalAssessment", "ExternalAssessment")
                        .WithMany()
                        .HasForeignKey("ExternalAssessmentId");

                    b.HasOne("LockthreatCompliance.Questions.ExternalAssessmentQuestion", "ExternalAssessmentQuestion")
                        .WithMany()
                        .HasForeignKey("ExternalAssessmentQuestionId");

                    b.HasOne("LockthreatCompliance.Questions.QuestionGroup", "QuestionGroup")
                        .WithMany()
                        .HasForeignKey("QuestionGroupId");

                    b.HasOne("LockthreatCompliance.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.BusinessEntities.ReviewData", "ReviewData")
                        .WithMany()
                        .HasForeignKey("ReviewDataId");

                    b.HasOne("LockthreatCompliance.Questions.Question", "SelfAssessmentQuestion")
                        .WithMany()
                        .HasForeignKey("SelfAssessmentQuestionId");
                });

            modelBuilder.Entity("LockthreatCompliance.QuestResponses.QuestResponseAttachment", b =>
                {
                    b.HasOne("LockthreatCompliance.QuestResponses.QuestResponse", "QuestResponse")
                        .WithMany()
                        .HasForeignKey("QuestResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.Questions.AnswerOption", b =>
                {
                    b.HasOne("LockthreatCompliance.Questions.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.Questions.ExternalQuestionAnswerOption", b =>
                {
                    b.HasOne("LockthreatCompliance.Questions.ExternalAssessmentQuestion", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockthreatCompliance.Questions.GroupRelatedQuestion", b =>
                {
                    b.HasOne("LockthreatCompliance.Questions.ExternalAssessmentQuestion", "ExternalAssessmentQuestion")
                        .WithMany()
                        .HasForeignKey("ExternalAssessmentQuestionId");

                    b.HasOne("LockthreatCompliance.Questions.QuestionGroup", "QuestionGroup")
                        .WithMany("GroupRelatedQuestions")
                        .HasForeignKey("QuestionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("LockthreatCompliance.Questions.QuestionGroup", b =>
                {
                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "AuditVendor")
                        .WithMany()
                        .HasForeignKey("AuditVendorId");

                    b.HasOne("LockthreatCompliance.AuthoritativeDocuments.AuthoritativeDocument", "AuthoritativeDocument")
                        .WithMany()
                        .HasForeignKey("AuthoritativeDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("LockthreatCompliance.FacilityTypes.FacilityType", "FacilityType")
                        .WithMany()
                        .HasForeignKey("FacilityTypeID");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "QuestionnaireStage")
                        .WithMany()
                        .HasForeignKey("QuestionnaireStageId");
                });

            modelBuilder.Entity("LockthreatCompliance.RemediationPlans.Remediation", b =>
                {
                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "AuthorityApprover")
                        .WithMany()
                        .HasForeignKey("AuthorityApproverId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "AuthorityExpertReviewer")
                        .WithMany()
                        .HasForeignKey("AuthorityExpertReviewerId");

                    b.HasOne("LockthreatCompliance.BusinessEntities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "EntityApprover")
                        .WithMany()
                        .HasForeignKey("EntityApproverId");

                    b.HasOne("LockthreatCompliance.Authorization.Users.User", "ExpertReviewer")
                        .WithMany()
                        .HasForeignKey("ExpertReviewerId");

                    b.HasOne("Abp.DynamicEntityParameters.DynamicParameterValue", "RemediationPlanStatus")
                        .WithMany()
                        .HasForeignKey("RemediationPlanStatusId");
                });

            modelBuilder.Entity("LockthreatCompliance.RemediationPlans.RemediationDocument", b =>
                {
                    b.HasOne("LockthreatCompliance.RemediationPlans.Remediation", "Remediation")
                        .WithMany()
                        .HasForeignKey("RemediationId");
                });

            modelBuilder.Entity("LockthreatCompliance.Storage.DocumentPath", b =>
                {
                    b.HasOne("LockthreatCompliance.ExternalAssessments.ExternalAssessmentAuditWorkPaper", "AWP")
                        .WithMany("Attachments")
                        .HasForeignKey("AWPId1");

                    b.HasOne("LockthreatCompliance.AuditProjects.AuditProcedure", null)
                        .WithMany("Attachments")
                        .HasForeignKey("AuditProcedureId");

                    b.HasOne("LockthreatCompliance.BusinessRisks.BusinessRisk", "BusinessRisk")
                        .WithMany("Attachments")
                        .HasForeignKey("BusinessRiskId");

                    b.HasOne("LockthreatCompliance.Exceptions.Exception", "Exception")
                        .WithMany("Attachments")
                        .HasForeignKey("ExceptionId");

                    b.HasOne("LockthreatCompliance.ExternalAssessments.ExternalAssessmentQuestionReview", null)
                        .WithMany("Attachments")
                        .HasForeignKey("ExternalAssessmentQuestionReviewId");

                    b.HasOne("LockthreatCompliance.FindingReports.FindingReport", "FindingReport")
                        .WithMany("Attachments")
                        .HasForeignKey("FindingReportId");

                    b.HasOne("LockthreatCompliance.Incidents.Incident", "Incident")
                        .WithMany("Attachments")
                        .HasForeignKey("IncidentId");

                    b.HasOne("LockthreatCompliance.BusinessEntities.ReviewData", "ReviewData")
                        .WithMany("Attachments")
                        .HasForeignKey("ReviewDataId");

                    b.HasOne("LockthreatCompliance.BusinessEntities.ReviewQuestion", "ReviewQuestion")
                        .WithMany("Attachments")
                        .HasForeignKey("ReviewQuestionId");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("LockthreatCompliance.Authorization.Roles.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("LockthreatCompliance.Authorization.Users.User", null)
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
